üìô TODO, as stated by the subject:
>> need to compile lift_bonus too
>> remove "repetitive" code. some tasks are duplicated in separated functions, like trimming spaces and other special characters.
>> check ./tester syntax + ./tester os_specific

>> minishell_tester: 145/146 on 01/04/2025 12:11

‚úîÔ∏è‚Ä¢Display a prompt when waiting for a new command.

‚úîÔ∏è‚Ä¢Have a working history.

‚úîÔ∏è‚Ä¢Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).

‚ö†Ô∏è‚Ä¢Avoid using more than one global variable to indicate a received signal. Consider
the implications: this approach ensures that your signal handler will not access your
main data structures.

‚úîÔ∏è‚Ä¢Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).

‚úîÔ∏è‚Ä¢Handle ‚Äô (single quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence.

‚úîÔ∏è‚Ä¢Handle " (double quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence except for $ (dollar sign).

‚úîÔ∏è‚Ä¢Implement redirections:
	‚úîÔ∏è‚ó¶< should redirect input.
	‚úîÔ∏è‚ó¶> should redirect output.
	‚úîÔ∏è‚ó¶<< should be given a delimiter, then read the input until a line containing the
	delimiter is seen. However, it doesn‚Äôt have to update the history!
	‚úîÔ∏è‚ó¶>> should redirect output in append mode.

‚úîÔ∏è‚Ä¢Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.

‚úîÔ∏è‚Ä¢Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
	‚úîÔ∏è$HOME	/home/user
	‚úîÔ∏è$PATH	/usr/bin:/bin:/usr/local/bin
	‚úîÔ∏è$USER	username
	‚úîÔ∏è$SHELL	/bin/bash (or your shell‚Äôs path)
	‚úîÔ∏è$?	Last command‚Äôs exit status
	‚úîÔ∏è$!	PID of the last background command
	‚úîÔ∏è$$	PID of the shell
	‚úîÔ∏è$0	shell name
	‚úîÔ∏è$PWD	current working directory
	‚úîÔ∏è$OLDPWD	previous working directory

‚úîÔ∏è‚Ä¢Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.

‚úîÔ∏è‚Ä¢Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.

‚úîÔ∏è‚Ä¢In interactive mode:
	‚úîÔ∏è‚ó¶ctrl-C displays a new prompt on a new line. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è when using ctrl+c in the middle of a process, it puts the promp duplicated !!!!!
	‚úîÔ∏è‚ó¶ctrl-D exits the shell.
	‚úîÔ∏è‚ó¶ctrl-\ does nothing.

‚Ä¢Your shell must implement the following
	‚úîÔ∏è‚ó¶echo with option -n
	‚úîÔ∏è‚ó¶cd with only a relative or absolute path
	‚úîÔ∏è‚ó¶pwd with no options
	‚úîÔ∏è‚ó¶export with no options
	‚úîÔ∏è‚ó¶unset with no options
	‚úîÔ∏è‚ó¶env with no options or arguments
	‚úîÔ∏è‚ó¶exit with no options


===================================================================================================================================================================


üí° HELPERS:
	- check functions used: nm -Ud minishell | grep " U "
	- check global variables used: nm -g minishell | grep " B "
	- find where a function is used: grep -rnw . -e 'function_name'
	- to run valgrind with the suppressed errors related to readline library:
		valgrind --suppressions=readline.supp -s --leak-check=full --show-leak-kinds=all ./minishell


===================================================================================================================================================================

üìù EVALUATION SHEET:

Mandatory Part
--------------

Compile
- Use "make -n" to see if compilation use "-Wall -Wextra -Werror". If not, select the "invalid compilation" flag.
- minishell compiles without any errors. If not, select the flag.
- The Makefile must not re-link. If not, select the flag.


Simple Command & global variables
- Execute a simple command with an absolute path like /bin/ls, or any other command without any options.
- How many global variables are used? Why? Ask the evaluated student to give you a concrete example of why it feels mandatory or logical.
- Check the global variable. This global variable cannot provide any other information or data access than the number of a received signal.
- Test an empty command.
- Test only spaces or tabs.
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


Arguments
- Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes or double quotes.
- Repeat multiple times with different commands and arguments.
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


echo
- Execute the echo command with or without arguments, or the -n option.
- Repeat multiple times with different arguments.
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


exit
- Execute exit command with or without arguments.
- Repeat multiple times with different arguments.
- Don't forget to relaunch the minishell
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


Return value of a process
- Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes and double quotes. Then execute echo $?
- Check the printed value. You can do the same in bash in order to compare the results.
- Repeat multiple times with different commands and arguments. Try some wrong commands like '/bin/ls filethatdoesntexist'
- Try anything like expr $? + $?
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


Signals
- ctrl-C in an empty prompt should display a new line with a new prompt.
- ctrl-\ in an empty prompt should not do anything.
- ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
- ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.
- The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.
- ctrl-D in a prompt after you wrote some stuff should not do anything.
- ctrl-\ in a prompt after you wrote some stuff should not do anything.
- Try ctrl-C after running a blocking command like cat without arguments or grep ‚Äúsomething‚Äú.
- Try ctrl-\ after running a blocking command like cat without arguments or grep ‚Äúsomething‚Äú.
- Try ctrl-D after running a blocking command like cat without arguments or grep ‚Äúsomething‚Äú.
- Repeat multiple times using different commands.
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


Double Quotes
- Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).
- Try a command like : echo "cat lol.c | cat > lol.c"
- Try anything except $.
- If something crashes, select the "crash" flag.
- If something doesn't work, select the "incomplete work" flag.


Single Quotes
- Execute commands with single quotes as arguments.
- Try empty arguments.
- Try environment variables, whitespaces, pipes, redirection in the single quotes.
- echo '$USER' must print "$USER".
- Nothing should be interpreted.


env
- Check if env shows you the current environment variables.


export
- Export environment variables, create new ones and replace old ones.
- Check the result with env.


unset
- Export environment variables, create new ones and replace old ones.
- Use unset to remove some of them.
- Check the result with env.


cd
- Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
- Repeat multiple times with working and not working cd
- Also, try '.' and '..' as arguments.


pwd
- Use the command pwd.
- Repeat multiple times in different directories.


Relative Path
- Execute commands but this time use a relative path.
- Repeat multiple times in different directories with a complex relative path (lots of ..).


Environment path
- Execute commands but this time without any path (ls, wc, awk and so forth).
- Unset the $PATH and ensure commands are not working anymore.
- Set the $PATH to a multiple directory value (directory1:directory2) and ensure that directories are checked in order from left to right.


Redirection
- Execute commands with redirections < and/or >
- Repeat multiple times with different commands and arguments and sometimes change > with >>
- Check if multiple tries of the same redirections fail.
- Test << redirection (it doesn't have to update the history).


Pipes
- Execute commands with pipes like 'cat file | grep bla | more'
- Repeat multiple times with different commands and arguments.
- Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'
- Try to mix pipes and redirections.


Go Crazy and history
- Type a command line, then use ctrl-C and press "Enter". The buffer should be clean and there should be nothing left to execute.
- Can we navigate through history using Up and Down? Can we retry some command?
- Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error.
- 'cat | cat | ls' should behave in a "normal way".
- Try to execute a long command with a ton of arguments.
- Have fun with that beautiful minishell and enjoy it!


Environment variables
- execute echo with some environment variables ($variable) as arguments.
- Check that $ is interpreted as an environment variable.
- Check that double quotes interpolate $.
- Check that USER exists. Otherwise, set it.
- echo "$USER" should print the value of the USER variable.



Bonus
-----
Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.

And, Or
- Use &&, || and parenthesis with commands and ensure minishell behaves the same way bash does.


Wildcard
- Use wildcards in arguments in the current working directory.


Surprise! (or not...)
- Set the USER environment variable.
- echo "'$USER'" should print the value of the USER variable.
- echo '"$USER"' should print "$USER".


===================================================================================================================================================================

Other tests (waltergcc on GitHub):

exit
-> leaks on main -> run_shell_loop -> handle_input -> malloc // not by exit itself... >>>>>>>> can't replicate this...

ctrl-c in cat without arguments
-> correctly sets exit_status to 130, but duplicates the prompt

ctrl-\ in cat without arguments
-> Quit (core dumped) + exit_status should be 131

"echo Hello World"
-> should be "minishell: echo Hello World: command not found", instead, the output is [o Hello World"]
-> same with single quotes, returns [o Hello World']

env PATH
-> should display an error message saying env can't be executed with options
	-> if string after env is not a pipe or redirection symbol, return error message
	-> env with grep, ok >> leaks with "env | grep USER"
	-> env with ls, segfault? >> shouldn't do anything...

export NEW_VAR="   -l  |"
-> when echo $NEW_VAR, the result should be "-l |", instead it seems to try to execute -l |
-> echo $NEW_VAR: minishell: syntax error: unexpected '|'

-> pwd -L
	-> should be "minishell: pwd: options aren't supported", but instead just executes pwd and ignores the rest

-> errors in here_doc <<
	-> 	[minishell] carlos-j@DESKTOP-FF2OML1:~/minishell$ cat << EOF   		carlos-j@DESKTOP-FF2OML1:~/minishell$ cat << EOF
		> this																> this
		> is																> is
		> a																	> a
		> test																> test
		> EOF																> EOF
		EOF: No such file or directory										this
																			is
																			a
																			test

cat | cat | ls
-> should list files and open the interactive mode
	-> just prints files

echo ~
-> prints "~" instead of the home directory:
	-> 	[minishell] carlos-j@DESKTOP-FF2OML1:~/minishell$ echo ~			carlos-j@DESKTOP-FF2OML1:~/minishell$ echo ~
		~																	/home/carlos-j
	-> make sure to print the home directory when the argument is just ~, since "echo ~test" prints "~test"


echo ~/test
-> same as above, but in this case should print the home/user/test directory instead of printing "~/test"

echo -n -n -n -n -n Hello World
-> should just do an echo -n and "ignore" the rest of the -name

echo -nnnnnnnnn Hello World
-> same as before, should treat it like -n

echo $"'$USER'"
-> is printing the $

< .
-> exits the minishell, should not do anything...

| (or "|")
-> 	minishell: syntax error: unexpected '|'
	free(): double free detected in tcache 2
	Aborted (core dumped)

with d| or ls | wc |
-> same as above

ls | wc >
ls | wc <
- > memory allocation error

ls | cat << > | wc

export =
or
export =test
-> small typo on the error: minishell: export: `': options aren't supported
	-> it must always be putting the error with the name of the argument export + 2, so in this case where there's just 2 args, it should put what's after the "="

export TEST.=test
-> error message...

cd -
-> go to previous directory

> *something*
-> > is the same as "touch", as it creates a file *something*
	-> it works, but after the command is executed, it enters interactive mode, needs ctrl+d to exit

>> *something*
-> >> is the same as "append"


" " | " " | " "
-> mixes the shell name and tries to open something that does not have permissions, instead of executing command "*empty*" (NULL?)

| command
-> if the first string of the input is a pipe, it should give the error "minishell: syntax error near unexpected token `|'" and exit_status = 2

all syntax errors should set exit_status to 2 (?)

env | env
-> leaks!!

"          nonexistent    "
-> print must trim spaces

> something
-> breaks....
