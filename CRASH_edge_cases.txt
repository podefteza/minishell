===========================================
FIXED ✔️ Test cases where it crashes (double free / segfault):

echo hey "$USER" '$USER '
echo hey "$USER" '$USER ' '

echo hey "$USER"
echo hey "$USER" '

echo hey "$USER"
echo hey "$USER" "

echo hey "$USER"
"

echo $USER
"

cd $OLDPWD
"

cd $PWD
"

echo $NONEXISTENT
"

$JUSTEXPANSION
'

REASON:
The error happens when using any command with unclosed quotes AFTER using a command with expansions.
SOLUTION:
Change process_initial_input() to int instead of void, and return 1 on error or 0 on success.
In handle_input(), check the returned value and if it was 1, do not proceed, (return ; instead).

===========================================
FIXED ✔️OTHER ERRORS FOUND:

bash:
carlos-j@podefteza:~/minishell$ export T='<<'
carlos-j@podefteza:~/minishell$ echo segfault $T grep segfault
segfault << grep segfault

minishell:
[minishell] carlos-j@podefteza:~/minishell$ export T='<<'
[minishell] carlos-j@podefteza:~/minishell$ echo segfault $T grep segfault
minishell: grep: Success

IDEA: preserve quotes in the variable expanded?
Test with single and double quotes

===========================================

Multiple heredocs, when CTRL+C is pressed, an aditional ENTER is necessary for each heredoc to finish, instead, it should finish immediately all child processes.

===========================================
FIXED ✔️bash:
carlos-j@podefteza:~/minishell$ cd ~carlos-j
carlos-j@podefteza:~$ pwd
/home/carlos-j

[minishell] carlos-j@podefteza:~/minishell$ cd ~carlos-j
minishell: cd: ~carlos-j: No such file or directory
===========================================

FIXED ✔️:
[minishell] carlos-j@podefteza:~/minishell$ export TEST+=100
minishell: export: `TEST+=100': not a valid identifier

bash:
carlos-j@podefteza:~/minishell$ export TEST+=100
carlos-j@podefteza:~/minishell$ export | grep TEST
declare -x TEST="100"


===========================================

ISSUES:

$ echo \\$USER
bash: 		\carlos-j
minishell:	\\$USER

TODO: do not interpret \ at all. just print them... pass them as their value.
SUBJECT: Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).

$ echo $"HOME"$USER
bash: 		HOMEcarlos-j
minishell:	$HOMEcarlos-j

$ echo $"42$"
bash: 		42$
minishell:	$42$

$ echo $"USER$"
bash: 		USER$
minishell:	$USER$

$ ">>"
bash: 		>>: command not found
minishell:	$USER$

$ cat << $USER
bash:		*enters heredoc*
minishell: 	carlos-j: Success

$ export T=">>"
$ $T lol
bash:		>>: command not found
minishell:

$ cat << "$US"E"R"
bash:		terminates on $USER
minishell:	does not terminate on $USER

$ cd --
bash:		same as cd-
minishell:	minishell: cd: --: No such file or directory



===========================================

  # **************************************************************************** #
  #                                COMPARE PARSING                               #
  # **************************************************************************** #

⚠️
/bin/echo $"HOME"$USER
/bin/echo $"HOM"E$USER
/bin/echo $"HOME"
/bin/echo $"42$"
/bin/echo \$USER
/bin/echo \\$USER
/bin/echo \\\$USER
/bin/echo \\\\$USER
/bin/echo \\\\\$USER
/bin/echo \\\\\\\\\$USER
/bin/echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\$USER \$PATH \\$PWD

  # **************************************************************************** #
  #                                PARSING HELL                                  #
  # **************************************************************************** #

✔️cat << $USER
why
not
$USER

✔️export T=">>"
$T lol

✔️cat << "$USER"
why
not
$USER

export T="echo segfault | grep segfault"
$T

⚠️'''''''''''''''' echo ok
echo '$'$'$'$'$'
echo '$'$'$'$'$'$'$'
echo "$"$'$'$"$"$"$"$'$'
✔️exit 9223372036854775805
✔️exit 123"123"
✔️>| echo sure
❌cd --

  # **************************************************************************** #
  #                                   BUILTINS                                   #
  # **************************************************************************** #

⚠️
echo $"HOME"$USER
echo $"HOM"E$USER
echo $"HOME"
echo $"42$"
echo \$USER
echo \\$USER
echo \\\$USER
echo \\\\$USER
echo \\\\\$USER
echo \\\\\\\\\$USER
echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\$USER \$PATH \\$PWD
⚠️cd '/////' 2>/dev/null
⚠️cd "doesntexist" 2>/dev/null
⚠️cd "wtf" 2>/dev/null

✔️ is flagged as wrong becase minishell initializes OLDPWD as NULL
pwd
cd -
pwd

✔️env | wc -l
✔️env what
✔️export --TEST=123
✔️export -TEST=100
✔️export -TEST=123

/bin/echo $mini_test
env | grep mini_test
export mini_test=
/bin/echo $mini_test
env | grep mini_test

unset TES;T
unset -TEST

ls | cat << stop | grep "asd"
is this good
stop

ls | cat << stop | ls -la | cat << stop1
12
32232
23
stop
awdaw
daswd
stop1

ls | cat << stop | ls -la | cat << stop1 | ls | cat << stop2 | ls -la | cat << stop3
$USER
ad
as $HOME
stop
awd
wf$PWDdqwdwqd
stop1
das
das
stop2
dsq
wd
wf$PWDdqwdwqd
stop3

ls | cat << stop | ls -la | cat << stop1 | ls | cat << stop2 | ls -la > out | cat << 'stop3'
$USER
ad
stop
dsa
stop1
sad
stop2
as $HOME
stop3
/bin/rm -f out

ls | cat << stop | ls -la | cat << stop1 | ls | cat << stop2 | ls -la > > out | cat << stop3
fe
wf
fwe
f
stop
dw
stop1
dwasd
stop2
cat Makefile | ls > out
cat out
/bin/rm -f out

ls | cat << stop | ls -la > out0| cat << stop1 | ls | cat << stop2 | ls -la >> out | cat << stop3
fe
wf
fwe
f
stop
dw
stop1
dw
stop2
e
wf
stop3
/bin/rm -f out
/bin/rm -f out0


ls|cat Makefile|cat<<asd>out
$USER
asd
/bin/rm -f out

ls|cat Makefile|cat<<'asd'>out
$USER
asd
/bin/rm -f out

ls|cat Makefile|cat<<"asd">out
$USER
asd
/bin/rm -f out

  # **************************************************************************** #
  #                                    REDIRS                                    #
  # **************************************************************************** #

  ### HERE_DOC ###
cat << lim
 "lim"
HELLO
42
 lim
testing your minishell
limm
lim

<<lim cat
 "lim"
HELLO
42
 lim
testing your minishell
limm
lim

cat << lim
test
lim

cat << EOF
"EOF"
!! HELLO
@42 !!
 EOF\t\b\n
testing your minishell :)
limm
EOF

cat << hello
$USER
$NOVAR
$HOME
hello

cat << 'lim'
$USER
$NOVAR
$HOME
lim

cat << lim''
$USER
$NOVAR
$HOME
lim

cat << "lim"
$USER
$NOVAR
$HOME
lim

cat << 'lim'
$USER
$NOVAR
$HOME
lim

  # **************************************************************************** #
  #                                     SCMD                                     #
  # **************************************************************************** #

""

touch "
"
/bin/rm -f "
"

asd
pwd
asd
echo asd
echo $?

  # **************************************************************************** #
  #                                  BROKEN SCMD                                 #
  # **************************************************************************** #

  "."

  # **************************************************************************** #
  #                                  VARIABLES                                   #
  # **************************************************************************** #

/bin/echo $"HOME"$USER

/bin/echo $"HOM"E$USER

/bin/echo $"'HOM'E"$USER

/bin/echo $'HOM'E$USER

/bin/echo $"HOME"

/bin/echo $'HOME'

/bin/echo $"$"

/bin/echo $"42$"

/bin/echo $'$'

  # **************************************************************************** #
  #                                  CORRECTION                                  #
  # **************************************************************************** #

  ""

echo 1 '>' echo 2

echo 1 '>>' file 2

'<<' lim echo 1 >>/dev/null

echo $"HOME"

echo $'HOME'

echo $"HOME"$USER

echo $"HOM"E$USER

echo $"'HOM'E"$USER

echo $'HOM'E$USER

echo $"HOME"

echo $'HOME'

echo $"$"

echo $"42$"

echo $'$'

env | grep $USER

export USER=
env | grep USER

unset PATH
cd /bin
ls

unset PATH
cd /bin/../bin/
ls

unset PATH
cd /bin/
sleep 2

  # **************************************************************************** #
  #                                  PATH FAILS                                  #
  # **************************************************************************** #

unset PATH

cd -

env -i ./minishell
cd /bin/
ls

touch tmp_x_file1
tmp_x_file1
echo $?
./tmp_x_file1
echo $?
export PATH=$HOME
echo $PATH
tmp_x_file1
echo $?
./tmp_x_file1
echo $?
unset PATH
tmp_x_file1
echo $?
./tmp_x_file1
echo $?
echo 42
/bin/rm -f tmp_x_file1

  # **************************************************************************** #
  #                                SYNTAX ERRORS                                 #
  # **************************************************************************** #

❌  .
❌  ..

  >echo>
/bin/rm -f echo

<echo<
/bin/rm -f echo

>>echo>>
/bin/rm -f echo

 # **************************************************************************** #
  #                                     WILD                                     #
  # **************************************************************************** #

  export test="arg1	arg2"
echo 'echo $1' > tmp_test_sh
bash tmp_test_sh $test
echo 'echo $2' > tmp_test_sh
bash tmp_test_sh $test
rm -f tmp_test_sh

echo "env | /usr/bin/wc -l" | env -i $MINISHELL_PATH"/"$EXECUTABLE
echo $?

echo "ls" | env -i $MINISHELL_PATH"/"$EXECUTABLE
echo $?

echo "unset PATH" | env -i $MINISHELL_PATH"/"$EXECUTABLE
echo $?


🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁
🏁                                    RESULT                                    🏁
🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁🏁
             TOTAL TEST COUNT: 941  TESTS PASSED: 808  LEAKING: 0
                     STD_OUT: 110  STD_ERR: 39  EXIT_CODE: 47
                         TOTAL FAILED AND PASSED CASES:
                                     ❌ 196
                                     ✅ 2627
